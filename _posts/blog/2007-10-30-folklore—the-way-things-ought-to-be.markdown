---
layout: post
title: Folklore—the way things ought to be
modified:
categories: blog
excerpt:
tags: []
image:
  feature:
---
It helps. Coming across reads like this, for not long ago we worked on such archaic systems. Reminded me of the time when I downloaded my first version of the Linux Kernel on a dial-up connection—took me a whole of 2 days! Question marks? Yesterday, I came across folklore.org, which is a sort of journal, dating back to the 1980s, documenting the early days of the development of the first Macintosh—the Apple before Apple, days when 7-inch displays were norm, 256 × 256 bitmapped array buffers were looked upon with envy, and a monochromatic screen producing a whole series of black and white "hello"s elicited a "whoa!" from even Steve Jobs. Literally. Ironically, I came across this series of posts while reading a <a href="http://arstechnica.com/reviews/os/mac-os-x-10-5.ars">review on Ars Technica</a> of Apple's newest offering—the Leopard. And I couldn't help but think about how far they, we, have come. From the days when a Macintosh producing a sinusoidal waveform on an oscilloscope would be enough to conclude that "the display works brilliantly" to the current norm in Apple OS'es where a reflection is added to just about everything—from the dock icons to the font. And, sometimes, even that is not enough—the poor dock icons are now subjected to both a reflection and a transperency effect. But then that's an issue for a different post, and if you are looking for the definitive review on the Leopard, I would strongly recommend the above-mentioned Ars Technica review by John Siracusa.

I just wanted to share these excerpts from the stories at folklore (such an aptly named site). If you ever find yourself yearning for some inspiration on one of those hot October afternoons when your head seems to be a basket full of bad wiring and a coffee just won't do it, go over to <a href="http://www.folklore.org/index.py">folklore.org</a> and see how things ought to be. Seriously. You will be amazed at what a well-written journal entry about some guys with a solder gun in one hand and a pineapple pizza in the other working to get an image of Uncle Scrooge to display on a monitor with just 192 scan lines will do to you :-):
<p style="text-align:center;"><img border="0" width="384" src="http://www.folklore.org/projects/Macintosh/images/design_team.jpg" height="123" /></p>

<blockquote>In May of 1981, Steve complained that our offices didn't seem lively enough, and gave me permission to buy a portable stereo system for the office at Apple's expense. Burrell and I ran out and bought a silver, cassette-based boom box right away, before he could change his mind. After that we usually played cassette tapes at night or on the weekends when there was nobody around that it would bother.
—Andey Hertzfeld (January 1981)</blockquote>
<blockquote>When I started on the project in February 1981, I was given Jef's old desk in the office next to Bud's. Desk by desk, Texaco Towers began to fill up, as more team members were recruited, like Collette Askeland to lay out the PC boards, or Ed Riddle to work on the keyboard hardware. When George Crow started, there wasn't an office available for him, so he set up a table in the common foyer and began the analog board design there.
—Andey Hertzfeld (January 1981)</blockquote>
<blockquote>After a while, surviving the first few game levels was pretty easy, unless you had been up all night programming or something. The Defender machine was probably a pretty good objective measure of one's current mental capacity. "Gee, I can't even get through level 2! I guess it's time to get some sleep." Better to put in a bad performance on the defender game than mess up the current programming task, or start down the wrong path on some hardware design.
—Donn Denman (September 1983)</blockquote>
This one's a bit longer than the others, but it is absolutely a must read. It's about this arcade game called "Defender," where...Just read on
<blockquote>The goal of Defender is to defend your humans from abduction by aliens. The evil green aliens drop down from the top of the screen and randomly pick up your humans, and try to bring them back up to the top of the screen. You control a ship and have to shoot the aliens, either before they grab a human, or during their rise up to the top of the screen. If an alien makes it to the top with a human, they consume him and become a vicious mutant, which attacks very aggressively. You start the game with ten humans, and if the last one dies, all the aliens become mutants, and they swarm in on your ship from all sides.

One day Burrell started doing something radical. Andy came by my cube and said "You've got to come see what Burrell's doing with Defender." "How can you innovate with a video game?" I wondered. I'd seen Burrell and Andy innovate on all kinds of things, but I couldn't image how he could somehow step outside the box of a video game—the machine controlled the flow and dictated the goals. How could you gain some control in that environment?

We started up a new competition, and when Burrell's turn came up, he did something that stunned me. He immediately shot all his humans! This was completely against the goal of the game! He didn't even go after the aliens, and when he shot the last human, they all turned to mutants and attacked him from all sides. He glanced in my direction with a grin on his face and said "Make a mess, clean it up!" and proceeded to dodge the swarm of angry mutants noisily chasing after him. "Burrell's not going to win this competition" I said to myself. "He's not going to last long with a screen full of mutants!"

Often a single mutant is enough to kill you. They move quicker, and with a different pace and pattern than the other aliens, so the normal evasive techniques don't work very well. Mutants move so quickly over small distances that they seem to just jump on top of you. Your ship is faster over the longer term, so you have to outrun them, establishing a gap, and only then do you have enough room to safely turn and fire at them.

When Burrell's next turn came up I was surprised by how long his ship survived. He'd already developed a technique for dealing with a whole mass of mutants. He would circle around them again and again, and that would gather them into a densely clumped swarm. Then, while circling, he'd fire a burst pattern across the whole swarm, not needing to aim at individuals. He was doing really well, cutting through the swarm like the Grim Reaper's scythe. Burrell was no longer attacking individual mutants, instead he was treating the whole swarm as one big target.

Burrell may have lost that game and the next few, but it wasn't too long before he was really mastering the machine. Instead of avoiding the tough situations, he'd immediately create them, and immediately start learning how to handle the worst situation imaginable. Pretty soon he would routinely handle anything the machine could throw at him.

I was beginning to see how Burrell could be so successful with everything he does.
—Don Denman (September 1983)</blockquote>
You know those language translation widgets on Web sites and PC applications that we all take for granted—something we now refer to as localizations wherein we select the type of language (English US, English UK, Afrikaans, etc.) and our application's menus, buttons, etc. reflect our language choices? Something that allows a software app developed in the US be marketed and sold with little or no technical modifications in the Netherlands? The following blurb describes how Bruce Horn started it all back in 1981 while writing a search program for the first Macintosh. Beautiful:
<blockquote>Alan Kay always said that any problem in Computer Science could be solved by adding another level of indirection. I thought that if we could refer to the program *data* separately and indirectly—the strings, bitmaps, window and dialog layouts, and other non-code information—we could make it possible for this information to be changed by people who would not have access to the source code. These people—translators, artists, and designers—would be able to change the text strings (to translate menu items from English to Norwegian, for example), modify the application and document icons, and replace graphical elements in the program, if the program were written such that these items were factored out of the application.

The ability to easily localize applications and the operating system would be novel, especially in the early 1980s. None of the systems that I had used, including Smalltalk, had this ability; it was just assumed that everybody using the system would be English-speaking, and that other countries would be building their own systems. If the Mac were able to be released in other countries, with menus, icons, dialogs, dates, and sorting orders translated to different languages, it would make a big improvement in our potential market share. I can't even remember when I started to recognize that the localization ability was necessary; it was a meme (probably started by Joanna Hoffman) that infected us all in the Mac group.
—Bruce Horn (December 1981)</blockquote>